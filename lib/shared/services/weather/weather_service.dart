import 'package:geolocator/geolocator.dart';

class WeatherService {
  static final WeatherService _instance = WeatherService._internal();
  factory WeatherService() => _instance;
  WeatherService._internal();

  // ƒê·ªÉ demo, ch√∫ng ta s·∫Ω m√¥ ph·ªèng d·ªØ li·ªáu th·ªùi ti·∫øt
  // Trong th·ª±c t·∫ø, b·∫°n s·∫Ω c·∫ßn API key t·ª´ OpenWeatherMap ho·∫∑c d·ªãch v·ª• t∆∞∆°ng t·ª±

  Future<WeatherData> getCurrentWeather() async {
    try {
      // L·∫•y v·ªã tr√≠ hi·ªán t·∫°i
      Position position = await _getCurrentPosition();

      // M√¥ ph·ªèng d·ªØ li·ªáu th·ªùi ti·∫øt
      return _generateMockWeatherData(position);

      // Trong th·ª±c t·∫ø, g·ªçi API:
      // final response = await _dio.get(
      //   'https://api.openweathermap.org/data/2.5/weather',
      //   queryParameters: {
      //     'lat': position.latitude,
      //     'lon': position.longitude,
      //     'appid': 'YOUR_API_KEY',
      //     'units': 'metric',
      //     'lang': 'vi',
      //   },
      // );
      // return WeatherData.fromJson(response.data);
    } catch (e) {
      throw Exception('Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt: $e');
    }
  }

  Future<List<WeatherForecast>> getWeatherForecast({int days = 5}) async {
    try {
      await _getCurrentPosition(); // Ki·ªÉm tra quy·ªÅn v·ªã tr√≠

      // M√¥ ph·ªèng d·ª± b√°o th·ªùi ti·∫øt 5 ng√†y
      return _generateMockForecast(days);
    } catch (e) {
      throw Exception('Kh√¥ng th·ªÉ l·∫•y d·ª± b√°o th·ªùi ti·∫øt: $e');
    }
  }

  Future<Position> _getCurrentPosition() async {
    bool serviceEnabled;
    LocationPermission permission;

    serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      throw Exception('D·ªãch v·ª• v·ªã tr√≠ ƒë√£ b·ªã t·∫Øt');
    }

    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        throw Exception('Quy·ªÅn truy c·∫≠p v·ªã tr√≠ b·ªã t·ª´ ch·ªëi');
      }
    }

    if (permission == LocationPermission.deniedForever) {
      throw Exception('Quy·ªÅn truy c·∫≠p v·ªã tr√≠ b·ªã t·ª´ ch·ªëi vƒ©nh vi·ªÖn');
    }

    return await Geolocator.getCurrentPosition();
  }

  WeatherData _generateMockWeatherData(Position position) {
    final now = DateTime.now();
    final conditions = ['sunny', 'cloudy', 'rainy', 'partly_cloudy'];
    final condition = conditions[now.hour % conditions.length];

    int temp = 25 + (now.hour % 10);
    if (now.hour < 6 || now.hour > 20) temp -= 5;

    return WeatherData(
      temperature: temp,
      condition: condition,
      description: _getWeatherDescription(condition),
      humidity: 60 + (now.minute % 30),
      windSpeed: 5 + (now.second % 10),
      location: 'H√† N·ªôi, Vi·ªát Nam',
      timestamp: now,
      icon: _getWeatherIcon(condition),
    );
  }

  List<WeatherForecast> _generateMockForecast(int days) {
    final forecasts = <WeatherForecast>[];
    final conditions = ['sunny', 'cloudy', 'rainy', 'partly_cloudy'];

    for (int i = 0; i < days; i++) {
      final date = DateTime.now().add(Duration(days: i));
      final condition = conditions[i % conditions.length];

      forecasts.add(
        WeatherForecast(
          date: date,
          condition: condition,
          description: _getWeatherDescription(condition),
          minTemp: 20 + (i % 5),
          maxTemp: 30 + (i % 8),
          humidity: 50 + (i % 40),
          chanceOfRain: condition == 'rainy' ? 80 : (i % 30),
          icon: _getWeatherIcon(condition),
        ),
      );
    }

    return forecasts;
  }

  String _getWeatherDescription(String condition) {
    switch (condition) {
      case 'sunny':
        return 'N·∫Øng ƒë·∫πp';
      case 'cloudy':
        return 'Nhi·ªÅu m√¢y';
      case 'rainy':
        return 'M∆∞a';
      case 'partly_cloudy':
        return 'C√≥ m√¢y';
      default:
        return 'Kh√¥ng x√°c ƒë·ªãnh';
    }
  }

  String _getWeatherIcon(String condition) {
    switch (condition) {
      case 'sunny':
        return '‚òÄÔ∏è';
      case 'cloudy':
        return '‚òÅÔ∏è';
      case 'rainy':
        return 'üåßÔ∏è';
      case 'partly_cloudy':
        return '‚õÖ';
      default:
        return 'üå§Ô∏è';
    }
  }

  // Ph√¢n t√≠ch th·ªùi ti·∫øt ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω ho·∫°t ƒë·ªông
  String getActivitySuggestion(WeatherData weather) {
    if (weather.temperature >= 30) {
      return 'Th·ªùi ti·∫øt n√≥ng, n√™n ·ªü trong nh√† c√≥ ƒëi·ªÅu h√≤a ho·∫∑c t·∫≠p th·ªÉ d·ª•c trong nh√†';
    } else if (weather.temperature <= 15) {
      return 'Th·ªùi ti·∫øt l·∫°nh, h√£y m·∫∑c ·∫•m v√† c√¢n nh·∫Øc ho·∫°t ƒë·ªông trong nh√†';
    } else if (weather.condition == 'rainy') {
      return 'Tr·ªùi m∆∞a, t·ªët nh·∫•t n√™n ·ªü trong nh√† ho·∫∑c mang theo √¥';
    } else if (weather.condition == 'sunny') {
      return 'Th·ªùi ti·∫øt ƒë·∫πp, th√≠ch h·ª£p cho c√°c ho·∫°t ƒë·ªông ngo√†i tr·ªùi!';
    } else {
      return 'Th·ªùi ti·∫øt ·ªïn ƒë·ªãnh, ph√π h·ª£p cho h·∫ßu h·∫øt c√°c ho·∫°t ƒë·ªông';
    }
  }

  bool isSuitableForOutdoorActivity(WeatherData weather) {
    return weather.condition != 'rainy' &&
        weather.temperature >= 18 &&
        weather.temperature <= 32 &&
        weather.windSpeed < 20;
  }
}

class WeatherData {
  final int temperature;
  final String condition;
  final String description;
  final int humidity;
  final double windSpeed;
  final String location;
  final DateTime timestamp;
  final String icon;

  WeatherData({
    required this.temperature,
    required this.condition,
    required this.description,
    required this.humidity,
    required this.windSpeed,
    required this.location,
    required this.timestamp,
    required this.icon,
  });

  factory WeatherData.fromJson(Map<String, dynamic> json) {
    return WeatherData(
      temperature: (json['main']['temp'] as num).round(),
      condition: json['weather'][0]['main'].toString().toLowerCase(),
      description: json['weather'][0]['description'],
      humidity: json['main']['humidity'],
      windSpeed: (json['wind']['speed'] as num).toDouble(),
      location: json['name'],
      timestamp: DateTime.fromMillisecondsSinceEpoch(json['dt'] * 1000),
      icon: json['weather'][0]['icon'],
    );
  }
}

class WeatherForecast {
  final DateTime date;
  final String condition;
  final String description;
  final int minTemp;
  final int maxTemp;
  final int humidity;
  final int chanceOfRain;
  final String icon;

  WeatherForecast({
    required this.date,
    required this.condition,
    required this.description,
    required this.minTemp,
    required this.maxTemp,
    required this.humidity,
    required this.chanceOfRain,
    required this.icon,
  });

  factory WeatherForecast.fromJson(Map<String, dynamic> json) {
    return WeatherForecast(
      date: DateTime.fromMillisecondsSinceEpoch(json['dt'] * 1000),
      condition: json['weather'][0]['main'].toString().toLowerCase(),
      description: json['weather'][0]['description'],
      minTemp: (json['temp']['min'] as num).round(),
      maxTemp: (json['temp']['max'] as num).round(),
      humidity: json['humidity'],
      chanceOfRain: ((json['pop'] as num) * 100).round(),
      icon: json['weather'][0]['icon'],
    );
  }
}
